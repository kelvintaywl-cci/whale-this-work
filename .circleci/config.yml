version: 2.1

defaults:
  environment: &environment
    DOCKER_REGISTRY: docker.io
    DOCKER_USER: kelvintaywl

parameters:
  remote-docker-version:
    # see https://circleci.com/docs/2.0/building-docker-images/#docker-version
    type: string
    default: '20.10.18'

executors:
  ubuntu-2204:
    machine:
      image: ubuntu-2204:2022.04.1
      resource_class: medium
  cimg-base:
    docker:
      - image: cimg/base:stable
    resource_class: medium
  kaniko-debug:
    docker:
      # we use the debug tag since it comes with sh
      - image: gcr.io/kaniko-project/executor:debug
        entrypoint: ""
    resource_class: medium

commands:
  check-docker:
    steps:
      - run: docker version
      - run: docker info
      - run:
          name: check DOCKER_ env vars
          command: |
            # DOCKER_* env vars can be/are used to override some Docker config (e.g., for Docker + Remote Docker)
            # See https://docs.docker.com/engine/reference/commandline/cli/#environment-variables
            (env | grep "DOCKER_") || true

jobs:
  explore-docker-daemon-machine:
    executor: ubuntu-2204
    steps:
      - check-docker
  explore-docker-daemon-docker:
    executor: cimg-base
    steps:
      - check-docker
  explore-docker-daemon-docker-remote:
    executor: cimg-base
    steps:
      - setup_remote_docker:
          version: << pipeline.parameters.remote-docker-version >>
      - check-docker

  docker-build-save-image:
    environment:
      <<: *environment
    executor: cimg-base
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - checkout
      - setup_remote_docker:
          version: << pipeline.parameters.remote-docker-version >>
      - run:
          name: Build image
          command: |
            docker image build --tag "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}" .
      - run:
          name: Save image as tar
          command: |
            mkdir -p images
            docker image save -o "images/<< parameters.image_name >>:${CIRCLE_SHA1}" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}"
      - persist_to_workspace:
          root: .
          paths:
            - images
  docker-load-push-image:
    environment:
      <<: *environment
    docker:
      - image: cimg/base:stable
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: << pipeline.parameters.remote-docker-version >>
      - run:
          name: Load image from tar
          command: |
            docker image load < "images/<< parameters.image_name >>:${CIRCLE_SHA1}"
      - run:
          name: Include additional image tags
          command: |
            docker image tag "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:<< parameters.image_tag >>"
      - run:
          name: Run built-image as container (background)
          command: |
            docker container run -d --name fancy-nginx -p "8080:80" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}"
      - run:
          name: Check container is up
          command: |
            # Because we are using remote_docker, all docker-related activities run inside this remote container.
            # In other words, the nginx server is not directly accessible to our primary container here.
            # Hence, we run dockerize in the same network in order to poll it.
            # NOTE that we are polling port 80, not 8080 since inside the network, our fancy-nginx is exposed at port 80 instead.
            # See https://circleci.com/docs/2.0/building-docker-images/#accessing-services
            docker container run --network container:fancy-nginx docker.io/jwilder/dockerize -wait http://localhost:80 -wait-retry-interval 2s -timeout 20s
      - run:
          name: Printscreen webpage served by container
          command: |
            # https://hub.docker.com/r/lifenz/docker-screenshot
            # Save a screenshot as screenshot.png at 1280px after pausing 2000ms, with zoom factor: 1
            docker container run --network container:fancy-nginx --name screenshot lifenz/docker-screenshot http://localhost:80 screenshot.png 1280px 2000 1
            docker cp screenshot:/srv/screenshot.png $PWD
      - store_artifacts:
           path: screenshot.png
      - run:
          name: Publish image
          command: |
            # login credentials should be provided via context or project environment variables.
            echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY --username $DOCKER_LOGIN --password-stdin
            docker image push --all-tags "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>"

  kaniko-build-push-machine:
    environment:
      <<: *environment
    executor: ubuntu-2204
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - checkout
      - run:
          name: Build and Push image via Kaniko
          command: |
            ./config.sh
            ls -laH config.json

            # Kaniko cache is a GCP Cloud Build feature (uses GCR).
            # See https://cloud.google.com/build/docs/optimize-builds/kaniko-cache
            # Hence, this is not applicable when pushing to Docker Hub
            docker run \
                -v /home/circleci/project/config.json:/kaniko/.docker/config.json:ro \
                -v /home/circleci/project:/workspace \
                gcr.io/kaniko-project/executor:latest \
                --dockerfile /workspace/Dockerfile \
                --destination "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:kaniko-machine-${CIRCLE_SHA1}" \
                --context dir:///workspace/
  # inspired by https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
  kaniko-build-push-docker-hub:
    environment:
      <<: *environment
    executor: kaniko-debug
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - checkout
      - run:
          name: add Docker Hub credentials
          command: |
            mkdir -p /kaniko/.docker
            ./config.sh
            mv config.json /kaniko/.docker
      - run:
          name: Build and Push image
          command: |
            # See https://circleci.com/docs/env-vars#built-in-environment-variables
            /kaniko/executor \
                --context "$(pwd)" \
                --dockerfile "$(pwd)/Dockerfile" \
                --destination "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:kaniko-docker-${CIRCLE_SHA1}"
  kaniko-build-push-docker-ecr:
    # NOTE: Kaniko image already comes with AWS ECR credential helper installed
    # See https://github.com/GoogleContainerTools/kaniko#pushing-to-amazon-ecr
    # What this means is that, we can just inject AWS credentials.
    # In this example, we set credentials via AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY env vars
    environment:
      <<: *environment
      AWS_DEFAULT_REGION: ap-northeast-1
      AWS_REGION: ap-northeast-1
      AWS_ECR_REGISTRY: public.ecr.aws/z1j6a2i1
    executor: kaniko-debug
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - checkout
      - run:
          name: check AWS configuration
          command: |
            env | grep AWS_ || true
      - run:
          name: Build and Push image
          command: |
            # We pass in AWS credentials and configuration through the AWS_* env vars, via build-arg arguments.
            # See https://github.com/GoogleContainerTools/kaniko/issues/713#issuecomment-557596725
            /kaniko/executor \
                --context "$(pwd)" \
                --dockerfile "$(pwd)/Dockerfile" \
                --build-arg AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION \
                --build-arg AWS_REGION=$AWS_REGION \
                --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                --destination "${AWS_ECR_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:kaniko-docker-${CIRCLE_SHA1}"
workflows:
#   explore-daemon:
#     jobs:
#       - explore-docker-daemon-machine:
#           name: machine
#       - explore-docker-daemon-docker:
#           name: docker
#       - explore-docker-daemon-docker-remote:
#           name: docker-and-remote-docker

  docker-save-load:
    jobs:
      - docker-build-save-image:
          name: build-save-image
      - docker-load-push-image:
          name: load-push-image
          requires:
            - build-save-image

#   kaniko:
#     jobs:
#       - kaniko-build-push-machine:
#           name: machine-push
#       - kaniko-build-push-docker-hub:
#           name: docker-push-docker-hub
#       - kaniko-build-push-docker-ecr:
#           name: docker-push-aws-ecr
