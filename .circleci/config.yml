version: 2.1

defaults:
  environment: &environment
    DOCKER_REGISTRY: docker.io
    DOCKER_USER: kelvintaywl
    DOCKER_BUILDKIT: 1
    COMPOSE_HTTP_TIMEOUT: 300
    COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build_custom_nginx_arm:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: arm.large
    environment:
      <<: *environment
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - checkout
      - run: |
          docker info
      - run:
          name: Build image
          command: |
            docker image build --tag "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}" .
            docker image tag "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:<< parameters.image_tag >>"
      - run:
          name: Run built-image as container (background)
          command: |
            docker container run -d --name fancy-nginx -p "8080:80" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}"
      - run:
          name: Check container is up
          command: |
            docker ps

  docker_compose_tests:
    machine:
      # Try to use the latest Machine image if possible
      # See https://circleci.com/docs/2.0/configuration-reference#available-linux-machine-images
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          name: Spin up services with Docker Compose
          command: |
            # set prefix to "whale-of-a-time" for names of our services
            docker-compose -p whale-of-a-time up -d
      - run:
          # Showcase another way to check on our server, besides dockerize
          name: Wait on application to be ready
          command: |
            N=8
            while [ $N -gt 0 ]
            do
              if $(nc -z localhost 3000); then
                echo "Connected!"
                exit 0
              fi
              echo "Not connected; retrying"
              N=$(( $N - 1 ))
              sleep 1
            done
            exit 1
      - run:
          name: Run integration tests with Newman
          command: |
            docker ps

            # Newman is a test runner for Postman collections
            # Here, we attach our newman container to the same network as our app server
            # so it can look up the app server at localhost:3000.
            # Alternatively, we could have installed Newman on this local machine
            # and it would be able to access the exposed app server at localhost:3000 too.
            # I wanted to demonstrate how containers can talk to one another if they are in the same network.
            docker container run --network container:whale-of-a-time_server_1 \
            -v $(pwd)/postman_collections:/etc/newman \
            -t postman/newman \
            run /etc/newman/Postgrest.json

workflows:
  # Builds a custom image,
  # spins it up for tests,
  # and publishes to Docker Hub!
  build_test_publish:
    jobs:
      - build_custom_nginx_arm:
          context: docker
#   # Runs services as-per a docker-compose file,
#   # and runs integration tests against spun services.
#   compose_tests:
#     jobs:
#       - docker_compose_tests
